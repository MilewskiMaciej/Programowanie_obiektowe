import java.lang.Math;
import java.util.Scanner;

class HelloWorld {
    //Zadanie 1
    public static void trojkiPitagorejskie(int n) {
        System.out.println("Trojki pitagorejskie do liczby " + n + ":");
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                int k = (int) Math.sqrt(Math.pow(i, 2) + Math.pow(j, 2));
                if (k <= n && Math.pow(i, 2) + Math.pow(j, 2) == Math.pow(k, 2)) {
                    System.out.println(i + "," + j + "," + k);
                }
            }
        }
    }
    
    //Zadanie 2
    public static void funKwaRozwiazania(int n) {
        System.out.println("Wszystkie mozliwe wspolczynniki dla n = " + n + ":");
        for(int i = -n; i <= n; i++) {
            if (i == 0) {
                continue;
            }
            for(int j = -n; j <= n; j++) {
                for(int k = -n; k <= n; k++) {
                    int d = (int) Math.pow(j, 2) - 4 * i * k;
                    if (d >= 0) {
                        System.out.println("a = " + i + ", b = " + j + ", c = " + k);
                    }
                }
            }
        }
    }
    
    //Zadanie 3
    public static void funKwaDelta(int n) {
        System.out.println("Wszystkie zestawy wspolczynnikow, gdzie delta jest liczba naturalna dla n = " + n + ":");
        for(int i = -n; i <= n; i++) {
            if (i == 0) {
                continue;
            }
            for(int j = -n; j <= n; j++) {
                for(int k = -n; k <= n; k++) {
                    int d = (j * j) - (4 * i * k);
                    if(d >= 0 && Math.sqrt(d) % 1 == 0) {
                        System.out.println("a = " + i + ", b = " + j + ", c = " + k);
                    }
                }
            }
        }
    }
    
    //Zadanie 4
    public static void liczbyPierwsze(int n) {
        System.out.print("Liczby pierwsze od 2 do " + n + ": ");
        for(int i = 2; i <= n; i++) {
            boolean isPrime = true;
            for(int j = 2; j <= Math.sqrt(i); j++) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime == true) {
                System.out.print(i + " ");
            }
        }
    }
    
    //Zadanie 5
    public static void liczbyPodzielne(double m, int n) {
        for(int i = 0; i <= Math.pow(10, m) - 1; i++) {
            if (i%n == 0) {
                System.out.print(i + " ");
            }
        }
    }
    
    //Zadanie 6
    public static void piramida(int n, int variant) {
        if(variant == 1) {
            for(int i = 1; i <= n; i++) {
                System.out.println("* ".repeat(i));
            }
        }
        else if(variant == 2) {
            for(int i = 1; i <= n; i++) {
                for(int j = 0; j < n - i; j++) {
                    System.out.print(" ");
                }
                for(int k = 0; k < 2 * i - 1; k++) {
                    System.out.print("*");
                }
                System.out.println();
            }
        }
        else {
            System.out.println("Podano zly wariant");
        }
    }
    
    //Zadanie 7
    public static void silnia(int n) {
        int wynik = 1;
        for(int i = 1; i <= n; i++) {
            wynik = wynik*i;
        }
        System.out.print(wynik);
    }
    
    //Zadanie 8
    public static void silniaPodwojna(int n) {
        int wynik = 1;
        int i = n;
        while (i > 0) {
            wynik = wynik * i;
            i = i-2;
        }
        System.out.print(wynik);
    }
    
    //Zadanie 9
    public static void silnia(int m, int n) {
        int wynik = 1;
        int i = n;
        while (i > 0) {
            wynik = wynik * i;
            i = i-m;
        }
        System.out.print(wynik);
    }
    
    //Zadanie 10
    public static void dwumianNewtona(int n, int k) {
        int wynikS = 1;
        int wynikK = 1;
        int nawias = n-k;
        int wynikNawias = 1;
        for(int i = 1; i<=n;i++) {
            wynikS = wynikS*i;
        }
        for(int j = 1; j<=k; j++) {
            wynikK = wynikK*j;
        }
        for(int l = 1; l<=nawias;l++) {
            wynikNawias = wynikNawias * l;
        }
        int wynikOstateczny = wynikS/(wynikK*wynikNawias);
        System.out.print(wynikOstateczny);
    }
    
    //Zadanie 11
    public static void ciagFibonacciego(int n) {
        int fib1 = 0;
        int fib2 = 1;
        if (n == 0) {
            System.out.print("Blad");
        }
        else if (n == 1) {
                System.out.print("Pierwszy element ciagu Fibonacciego: " + fib1);
        }
        else if (n == 2) {
            System.out.print("Pierwsze 2 elementy ciagu Fibonacciego: " + fib1 + ", " + fib2);
        }
        else {
            System.out.print("Pierwsze " + n + " elemetow ciagu Fibonacciego: ");
            System.out.print(fib1);
            System.out.print(", " + fib2);
            for(int i = 3; i <= n; i++) {
                int fibN = fib1 + fib2;
                System.out.print(", " + fibN);
                fib1 = fib2;
                fib2 = fibN;
            }
        }
    }
    
    //Zadanie 12, punkt 1
    public static void sumaNaturalnych(int n) {
        int sum = 0;
        for(int i = 0; i <= n; i++) {
            sum += i;
        }
        System.out.print("Suma " + n + " liczb naturalnych: " + sum);
    }
    
    //Zadanie 12, punkt 2
    public static void sumaParzystych(int n) {
        int sum = 0;
        for(int i = 0; i <= n; i++) {
            sum += i*2;
        }
        System.out.print("Suma " + n + " liczb parzystych: " + sum);
    }
    
    //Zadanie 12, punkt 3
    public static void sumaNieparzystych(int n) {
        int sum = 0;
        for(int i = 1; i <= n; i++) {
            sum += (i*2) - 1;
        }
        System.out.print("Suma " + n + " liczb nieparzystych: " + sum);
    }
    
    //Zadanie 12, punkt 4
    public static void sumaKwaNaturalnych(int n) {
        int sum = 0;
        for(int i = 0; i <= n; i++) {
            sum += Math.pow(i, 2);
        }
        System.out.print("Suma " + n + " kwadratow liczb naturalnych: " + sum);
    }
    
    //Zadanie 12, punkt 5
    public static void sumaSzeNaturalnych(int n) {
        int sum = 0;
        for(int i = 1; i <= n; i++) {
            sum += Math.pow(i, 3);
        }
        System.out.print("Suma " + n + " szescianow liczb naturalnych: " + sum);
    }
    
    //Zadanie 12, punkt 6
    public static void sumaOdwNaturalnych(int n) {
        double sum = 0.0;
        for(int i = 1; i <= n; i++) {
            sum += 1.0/i;
        }
        System.out.print("Suma " + n + " odwrotnosci liczb naturalnych: " + sum);
    }
    
    //Zadanie 13
    public static boolean czyPalindrom(String wyraz) {
        int len = wyraz.length();
        for(int i = 0; i < len/2; i++) {
            if(wyraz.charAt(i) != wyraz.charAt(len - 1 - i)) {
                return false;
            }
        }
        return true;
    }
    
    //Zadanie 16
    public static boolean czyDoskonala(int n) {
        int sum = 0;
        if (n < 1) {
            return false;
        }
        else {
            for(int i = 1; i <= n/2; i++) {
                if (n % i == 0) {
                    sum += i;
                }
            }
            if (sum == n) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    
    //Zadanie 17
    public static boolean czyPierwsza(int n) {
        if(n < 2) {
            return false;
        }
        else {
            for(int i = 2; i <= Math.sqrt(n); i++) {
                if (n % i == 0) {
                    return false;
                }
            }
        }
        return true;
    }
    
    //Zadanie 18
    public static void NWD(int a, int b) {
        System.out.print("Najwiekszym wspolnym dzielnikiem dla " + a + " i " + b + " jest ");
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        System.out.print(a);
    }
    
    //Zadanie 19
    public static void wczytajTablice(int n) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> l = new ArrayList<Integer>();
        for(int i = 0; i < n; i++) {
            System.out.print("Podaj liczbe: ");
            int num = scanner.nextInt();
            l.add(num);
        }
        int len = l.length();
        int[] tab = l.toArray(new int[len]);
        System.out.print(tab);
    }
    
        public static void main(String[] args) {
            wczytajTablice(10);
    }
}
